2023/02/10 14:25:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.16 (default, Jan 17 2023, 22:25:28) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 236309670
    GPU 0: NVIDIA GeForce RTX 3070
    CUDA_HOME: None
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.34.31935 版
    GCC: n/a
    PyTorch: 1.13.1+cu116
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1+cu116
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/10 14:25:20 - mmengine - INFO - Config:
model = dict(
    type='MaskRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_mask=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = 'G:\\Study\\Python\\homework\\data\\balloon\\\\'
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=2,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='G:\\Study\\Python\\homework\\data\\balloon\\\\',
        ann_file='train/train.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs')
        ]))
val_dataloader = dict(
    batch_size=2,
    num_workers=1,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='G:\\Study\\Python\\homework\\data\\balloon\\\\',
        ann_file='val/val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
test_dataloader = dict(
    batch_size=2,
    num_workers=1,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='G:\\Study\\Python\\homework\\data\\balloon\\\\',
        ann_file='val/val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='G:\\Study\\Python\\homework\\data\\balloon\\\\val/val.json',
    metric=['bbox', 'segm'],
    format_only=False)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='G:\\Study\\Python\\homework\\data\\balloon\\\\val/val.json',
    metric=['bbox', 'segm'],
    format_only=False)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'G:\\Study\\Python\\homework\\pretrained\\mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'
resume = False
launcher = 'none'
work_dir = './work_dirs\\mask-rcnn_r50_fpn_1x_coco'

2023/02/10 14:25:20 - mmengine - WARNING - The "visualizer" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:20 - mmengine - WARNING - The "vis_backend" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:20 - mmengine - WARNING - The "model" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:20 - mmengine - WARNING - The "task util" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/10 14:25:21 - mmengine - WARNING - The "hook" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/10 14:25:21 - mmengine - WARNING - The "loop" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "dataset" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "transform" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "data sampler" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "optimizer constructor" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "optimizer" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "optim_wrapper" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "parameter scheduler" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:21 - mmengine - WARNING - The "metric" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:22 - mmengine - WARNING - The "weight initializer" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 14:25:22 - mmengine - INFO - load model from: torchvision://resnet50
2023/02/10 14:25:22 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2023/02/10 14:25:22 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023/02/10 14:25:23 - mmengine - INFO - Load checkpoint from G:\Study\Python\homework\pretrained\mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth
2023/02/10 14:25:23 - mmengine - INFO - Checkpoints will be saved to G:\Study\Python\homework\mmdetection\tools\work_dirs\mask-rcnn_r50_fpn_1x_coco.
2023/02/10 14:25:29 - mmengine - INFO - Epoch(train)  [1][ 5/31]  lr: 1.8016e-04  eta: 0:07:44  time: 1.2665  data_time: 0.4820  memory: 3795  loss: 7.9060  loss_rpn_cls: 0.1138  loss_rpn_bbox: 0.0249  loss_cls: 0.8431  acc: 27.7344  loss_bbox: 0.3586  loss_mask: 6.5657
2023/02/10 14:25:31 - mmengine - INFO - Epoch(train)  [1][10/31]  lr: 3.8036e-04  eta: 0:04:49  time: 0.7991  data_time: 0.2448  memory: 3527  loss: 5.6112  loss_rpn_cls: 0.0789  loss_rpn_bbox: 0.0181  loss_cls: 0.7275  acc: 95.4102  loss_bbox: 0.3046  loss_mask: 4.4821
2023/02/10 14:25:32 - mmengine - INFO - Epoch(train)  [1][15/31]  lr: 5.8056e-04  eta: 0:03:53  time: 0.6532  data_time: 0.1661  memory: 4000  loss: 4.2273  loss_rpn_cls: 0.0597  loss_rpn_bbox: 0.0184  loss_cls: 0.5971  acc: 95.5078  loss_bbox: 0.3538  loss_mask: 3.1984
2023/02/10 14:25:34 - mmengine - INFO - Epoch(train)  [1][20/31]  lr: 7.8076e-04  eta: 0:03:21  time: 0.5715  data_time: 0.1260  memory: 3527  loss: 3.3681  loss_rpn_cls: 0.0481  loss_rpn_bbox: 0.0160  loss_cls: 0.5011  acc: 86.0352  loss_bbox: 0.3380  loss_mask: 2.4650
2023/02/10 14:25:36 - mmengine - INFO - Epoch(train)  [1][25/31]  lr: 9.8096e-04  eta: 0:03:01  time: 0.5226  data_time: 0.1018  memory: 3545  loss: 2.8498  loss_rpn_cls: 0.0426  loss_rpn_bbox: 0.0141  loss_cls: 0.4356  acc: 95.8008  loss_bbox: 0.3232  loss_mask: 2.0343
2023/02/10 14:25:37 - mmengine - INFO - Epoch(train)  [1][30/31]  lr: 1.1812e-03  eta: 0:02:48  time: 0.4937  data_time: 0.0865  memory: 3891  loss: 2.5856  loss_rpn_cls: 0.0455  loss_rpn_bbox: 0.0169  loss_cls: 0.4199  acc: 95.9961  loss_bbox: 0.3419  loss_mask: 1.7615
2023/02/10 14:25:38 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:25:38 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/02/10 14:25:52 - mmengine - INFO - Epoch(val)  [1][5/7]    eta: 0:00:04  time: 2.1261  data_time: 0.5527  memory: 4187  
2023/02/10 14:25:53 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:25:53 - mmengine - INFO - bbox_mAP_copypaste: 0.376 0.575 0.488 0.000 0.247 0.466
2023/02/10 14:25:53 - mmengine - INFO - Evaluating segm...
2023/02/10 14:25:53 - mmengine - INFO - segm_mAP_copypaste: 0.419 0.574 0.486 0.000 0.246 0.512
2023/02/10 14:25:53 - mmengine - INFO - Epoch(val) [1][7/7]  coco/bbox_mAP: 0.3760  coco/bbox_mAP_50: 0.5750  coco/bbox_mAP_75: 0.4880  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2470  coco/bbox_mAP_l: 0.4660  coco/segm_mAP: 0.4190  coco/segm_mAP_50: 0.5740  coco/segm_mAP_75: 0.4860  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.2460  coco/segm_mAP_l: 0.5120
2023/02/10 14:25:56 - mmengine - INFO - Epoch(train)  [2][ 5/31]  lr: 1.4214e-03  eta: 0:02:49  time: 0.5058  data_time: 0.0790  memory: 3690  loss: 2.3033  loss_rpn_cls: 0.0429  loss_rpn_bbox: 0.0167  loss_cls: 0.3848  acc: 93.7500  loss_bbox: 0.3460  loss_mask: 1.5129
2023/02/10 14:25:58 - mmengine - INFO - Epoch(train)  [2][10/31]  lr: 1.6216e-03  eta: 0:02:44  time: 0.4966  data_time: 0.0704  memory: 3699  loss: 2.1028  loss_rpn_cls: 0.0409  loss_rpn_bbox: 0.0167  loss_cls: 0.3593  acc: 85.5469  loss_bbox: 0.3433  loss_mask: 1.3426
2023/02/10 14:26:00 - mmengine - INFO - Epoch(train)  [2][15/31]  lr: 1.8218e-03  eta: 0:02:37  time: 0.4834  data_time: 0.0636  memory: 3702  loss: 1.9727  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.0168  loss_cls: 0.3434  acc: 84.0820  loss_bbox: 0.3557  loss_mask: 1.2163
2023/02/10 14:26:02 - mmengine - INFO - Epoch(train)  [2][20/31]  lr: 2.0220e-03  eta: 0:02:34  time: 0.3921  data_time: 0.0126  memory: 3887  loss: 1.7512  loss_rpn_cls: 0.0411  loss_rpn_bbox: 0.0183  loss_cls: 0.3167  acc: 91.2109  loss_bbox: 0.3701  loss_mask: 1.0049
2023/02/10 14:26:06 - mmengine - INFO - Epoch(train)  [2][25/31]  lr: 2.2222e-03  eta: 0:02:38  time: 0.4271  data_time: 0.0118  memory: 3843  loss: 1.0058  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0164  loss_cls: 0.2463  acc: 97.2656  loss_bbox: 0.3550  loss_mask: 0.3578
2023/02/10 14:26:08 - mmengine - INFO - Epoch(train)  [2][30/31]  lr: 2.4224e-03  eta: 0:02:33  time: 0.4333  data_time: 0.0116  memory: 3602  loss: 0.8543  loss_rpn_cls: 0.0263  loss_rpn_bbox: 0.0159  loss_cls: 0.2017  acc: 97.1680  loss_bbox: 0.3550  loss_mask: 0.2554
2023/02/10 14:26:08 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:26:08 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/02/10 14:26:15 - mmengine - INFO - Epoch(val)  [2][5/7]    eta: 0:00:01  time: 1.2146  data_time: 0.2561  memory: 2600  
2023/02/10 14:26:16 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:26:16 - mmengine - INFO - bbox_mAP_copypaste: 0.545 0.808 0.700 0.000 0.480 0.599
2023/02/10 14:26:16 - mmengine - INFO - Evaluating segm...
2023/02/10 14:26:16 - mmengine - INFO - segm_mAP_copypaste: 0.714 0.803 0.800 0.000 0.665 0.774
2023/02/10 14:26:16 - mmengine - INFO - Epoch(val) [2][7/7]  coco/bbox_mAP: 0.5450  coco/bbox_mAP_50: 0.8080  coco/bbox_mAP_75: 0.7000  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4800  coco/bbox_mAP_l: 0.5990  coco/segm_mAP: 0.7140  coco/segm_mAP_50: 0.8030  coco/segm_mAP_75: 0.8000  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.6650  coco/segm_mAP_l: 0.7740
2023/02/10 14:26:18 - mmengine - INFO - Epoch(train)  [3][ 5/31]  lr: 2.6626e-03  eta: 0:02:27  time: 0.4402  data_time: 0.0136  memory: 3848  loss: 0.8058  loss_rpn_cls: 0.0273  loss_rpn_bbox: 0.0183  loss_cls: 0.1892  acc: 94.1406  loss_bbox: 0.3603  loss_mask: 0.2108
2023/02/10 14:26:20 - mmengine - INFO - Epoch(train)  [3][10/31]  lr: 2.8628e-03  eta: 0:02:22  time: 0.4443  data_time: 0.0137  memory: 3840  loss: 0.7457  loss_rpn_cls: 0.0264  loss_rpn_bbox: 0.0191  loss_cls: 0.1746  acc: 97.6562  loss_bbox: 0.3400  loss_mask: 0.1856
2023/02/10 14:26:22 - mmengine - INFO - Epoch(train)  [3][15/31]  lr: 3.0630e-03  eta: 0:02:19  time: 0.4495  data_time: 0.0132  memory: 3699  loss: 0.6488  loss_rpn_cls: 0.0226  loss_rpn_bbox: 0.0179  loss_cls: 0.1490  acc: 92.5781  loss_bbox: 0.3047  loss_mask: 0.1546
2023/02/10 14:26:26 - mmengine - INFO - Epoch(train)  [3][20/31]  lr: 3.2632e-03  eta: 0:02:22  time: 0.4929  data_time: 0.0092  memory: 3711  loss: 0.5922  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0181  loss_cls: 0.1364  acc: 95.7031  loss_bbox: 0.2813  loss_mask: 0.1361
2023/02/10 14:26:28 - mmengine - INFO - Epoch(train)  [3][25/31]  lr: 3.4634e-03  eta: 0:02:18  time: 0.4723  data_time: 0.0094  memory: 3728  loss: 0.5630  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0201  loss_cls: 0.1297  acc: 95.1172  loss_bbox: 0.2667  loss_mask: 0.1275
2023/02/10 14:26:31 - mmengine - INFO - Epoch(train)  [3][30/31]  lr: 3.6636e-03  eta: 0:02:17  time: 0.4880  data_time: 0.0093  memory: 3743  loss: 0.5220  loss_rpn_cls: 0.0164  loss_rpn_bbox: 0.0195  loss_cls: 0.1189  acc: 97.0703  loss_bbox: 0.2407  loss_mask: 0.1265
2023/02/10 14:26:31 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:26:31 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/02/10 14:26:37 - mmengine - INFO - Epoch(val)  [3][5/7]    eta: 0:00:00  time: 0.9001  data_time: 0.1781  memory: 2180  
2023/02/10 14:26:37 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:26:37 - mmengine - INFO - bbox_mAP_copypaste: 0.733 0.871 0.833 0.000 0.716 0.781
2023/02/10 14:26:37 - mmengine - INFO - Evaluating segm...
2023/02/10 14:26:37 - mmengine - INFO - segm_mAP_copypaste: 0.792 0.855 0.855 0.000 0.747 0.847
2023/02/10 14:26:37 - mmengine - INFO - Epoch(val) [3][7/7]  coco/bbox_mAP: 0.7330  coco/bbox_mAP_50: 0.8710  coco/bbox_mAP_75: 0.8330  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.7160  coco/bbox_mAP_l: 0.7810  coco/segm_mAP: 0.7920  coco/segm_mAP_50: 0.8550  coco/segm_mAP_75: 0.8550  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.7470  coco/segm_mAP_l: 0.8470
2023/02/10 14:26:39 - mmengine - INFO - Epoch(train)  [4][ 5/31]  lr: 3.9039e-03  eta: 0:02:12  time: 0.4905  data_time: 0.0124  memory: 3825  loss: 0.4504  loss_rpn_cls: 0.0134  loss_rpn_bbox: 0.0185  loss_cls: 0.1011  acc: 96.8750  loss_bbox: 0.1955  loss_mask: 0.1220
2023/02/10 14:26:41 - mmengine - INFO - Epoch(train)  [4][10/31]  lr: 4.1041e-03  eta: 0:02:09  time: 0.4822  data_time: 0.0122  memory: 3686  loss: 0.4061  loss_rpn_cls: 0.0109  loss_rpn_bbox: 0.0178  loss_cls: 0.0942  acc: 94.9219  loss_bbox: 0.1701  loss_mask: 0.1130
2023/02/10 14:26:43 - mmengine - INFO - Epoch(train)  [4][15/31]  lr: 4.3043e-03  eta: 0:02:05  time: 0.4540  data_time: 0.0129  memory: 3854  loss: 0.3916  loss_rpn_cls: 0.0103  loss_rpn_bbox: 0.0191  loss_cls: 0.0920  acc: 99.1211  loss_bbox: 0.1588  loss_mask: 0.1114
2023/02/10 14:26:45 - mmengine - INFO - Epoch(train)  [4][20/31]  lr: 4.5045e-03  eta: 0:02:02  time: 0.4530  data_time: 0.0116  memory: 3994  loss: 0.3709  loss_rpn_cls: 0.0102  loss_rpn_bbox: 0.0198  loss_cls: 0.0908  acc: 98.2422  loss_bbox: 0.1358  loss_mask: 0.1143
2023/02/10 14:26:49 - mmengine - INFO - Epoch(train)  [4][25/31]  lr: 4.7047e-03  eta: 0:02:03  time: 0.4916  data_time: 0.0111  memory: 3798  loss: 0.3321  loss_rpn_cls: 0.0082  loss_rpn_bbox: 0.0170  loss_cls: 0.0831  acc: 97.7539  loss_bbox: 0.1152  loss_mask: 0.1087
2023/02/10 14:26:53 - mmengine - INFO - Epoch(train)  [4][30/31]  lr: 4.9049e-03  eta: 0:02:04  time: 0.5324  data_time: 0.0112  memory: 3703  loss: 0.3319  loss_rpn_cls: 0.0081  loss_rpn_bbox: 0.0159  loss_cls: 0.0849  acc: 99.2188  loss_bbox: 0.1118  loss_mask: 0.1113
2023/02/10 14:26:53 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:26:53 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/02/10 14:26:59 - mmengine - INFO - Epoch(val)  [4][5/7]    eta: 0:00:00  time: 0.7306  data_time: 0.1423  memory: 1812  
2023/02/10 14:27:01 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:27:01 - mmengine - INFO - bbox_mAP_copypaste: 0.748 0.862 0.862 0.000 0.724 0.797
2023/02/10 14:27:01 - mmengine - INFO - Evaluating segm...
2023/02/10 14:27:01 - mmengine - INFO - segm_mAP_copypaste: 0.786 0.862 0.839 0.000 0.711 0.854
2023/02/10 14:27:01 - mmengine - INFO - Epoch(val) [4][7/7]  coco/bbox_mAP: 0.7480  coco/bbox_mAP_50: 0.8620  coco/bbox_mAP_75: 0.8620  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.7240  coco/bbox_mAP_l: 0.7970  coco/segm_mAP: 0.7860  coco/segm_mAP_50: 0.8620  coco/segm_mAP_75: 0.8390  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.7110  coco/segm_mAP_l: 0.8540
2023/02/10 14:27:05 - mmengine - INFO - Epoch(train)  [5][ 5/31]  lr: 5.1451e-03  eta: 0:02:03  time: 0.5248  data_time: 0.0167  memory: 3716  loss: 0.3328  loss_rpn_cls: 0.0068  loss_rpn_bbox: 0.0153  loss_cls: 0.0836  acc: 99.2188  loss_bbox: 0.1124  loss_mask: 0.1147
2023/02/10 14:27:07 - mmengine - INFO - Epoch(train)  [5][10/31]  lr: 5.3453e-03  eta: 0:02:01  time: 0.5385  data_time: 0.0164  memory: 3571  loss: 0.3085  loss_rpn_cls: 0.0059  loss_rpn_bbox: 0.0135  loss_cls: 0.0755  acc: 98.4375  loss_bbox: 0.1020  loss_mask: 0.1116
2023/02/10 14:27:09 - mmengine - INFO - Epoch(train)  [5][15/31]  lr: 5.5455e-03  eta: 0:01:57  time: 0.5300  data_time: 0.0164  memory: 3840  loss: 0.3177  loss_rpn_cls: 0.0065  loss_rpn_bbox: 0.0132  loss_cls: 0.0783  acc: 91.3086  loss_bbox: 0.1047  loss_mask: 0.1151
2023/02/10 14:27:11 - mmengine - INFO - Epoch(train)  [5][20/31]  lr: 5.7457e-03  eta: 0:01:54  time: 0.5203  data_time: 0.0128  memory: 3519  loss: 0.2951  loss_rpn_cls: 0.0056  loss_rpn_bbox: 0.0122  loss_cls: 0.0749  acc: 93.7500  loss_bbox: 0.0953  loss_mask: 0.1070
2023/02/10 14:27:13 - mmengine - INFO - Epoch(train)  [5][25/31]  lr: 5.9459e-03  eta: 0:01:50  time: 0.5227  data_time: 0.0128  memory: 3586  loss: 0.3103  loss_rpn_cls: 0.0062  loss_rpn_bbox: 0.0121  loss_cls: 0.0824  acc: 95.8008  loss_bbox: 0.0976  loss_mask: 0.1119
2023/02/10 14:27:15 - mmengine - INFO - Epoch(train)  [5][30/31]  lr: 6.1461e-03  eta: 0:01:47  time: 0.5300  data_time: 0.0139  memory: 3887  loss: 0.3282  loss_rpn_cls: 0.0070  loss_rpn_bbox: 0.0143  loss_cls: 0.0871  acc: 96.8750  loss_bbox: 0.1048  loss_mask: 0.1150
2023/02/10 14:27:16 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:27:16 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/02/10 14:27:21 - mmengine - INFO - Epoch(val)  [5][5/7]    eta: 0:00:00  time: 0.6947  data_time: 0.1216  memory: 2024  
2023/02/10 14:27:21 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:27:21 - mmengine - INFO - bbox_mAP_copypaste: 0.720 0.894 0.841 0.000 0.686 0.773
2023/02/10 14:27:21 - mmengine - INFO - Evaluating segm...
2023/02/10 14:27:21 - mmengine - INFO - segm_mAP_copypaste: 0.761 0.878 0.852 0.000 0.661 0.827
2023/02/10 14:27:21 - mmengine - INFO - Epoch(val) [5][7/7]  coco/bbox_mAP: 0.7200  coco/bbox_mAP_50: 0.8940  coco/bbox_mAP_75: 0.8410  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.6860  coco/bbox_mAP_l: 0.7730  coco/segm_mAP: 0.7610  coco/segm_mAP_50: 0.8780  coco/segm_mAP_75: 0.8520  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.6610  coco/segm_mAP_l: 0.8270
2023/02/10 14:27:23 - mmengine - INFO - Epoch(train)  [6][ 5/31]  lr: 6.3864e-03  eta: 0:01:43  time: 0.5194  data_time: 0.0142  memory: 3708  loss: 0.3025  loss_rpn_cls: 0.0067  loss_rpn_bbox: 0.0122  loss_cls: 0.0814  acc: 93.0664  loss_bbox: 0.0949  loss_mask: 0.1073
2023/02/10 14:27:25 - mmengine - INFO - Epoch(train)  [6][10/31]  lr: 6.5866e-03  eta: 0:01:40  time: 0.4829  data_time: 0.0141  memory: 3579  loss: 0.2848  loss_rpn_cls: 0.0062  loss_rpn_bbox: 0.0119  loss_cls: 0.0770  acc: 99.2188  loss_bbox: 0.0903  loss_mask: 0.0993
2023/02/10 14:27:27 - mmengine - INFO - Epoch(train)  [6][15/31]  lr: 6.7868e-03  eta: 0:01:37  time: 0.4751  data_time: 0.0144  memory: 3841  loss: 0.2949  loss_rpn_cls: 0.0062  loss_rpn_bbox: 0.0135  loss_cls: 0.0779  acc: 94.5312  loss_bbox: 0.0938  loss_mask: 0.1034
2023/02/10 14:27:29 - mmengine - INFO - Epoch(train)  [6][20/31]  lr: 6.9870e-03  eta: 0:01:34  time: 0.4064  data_time: 0.0093  memory: 3788  loss: 0.2935  loss_rpn_cls: 0.0064  loss_rpn_bbox: 0.0141  loss_cls: 0.0764  acc: 97.8516  loss_bbox: 0.0961  loss_mask: 0.1005
2023/02/10 14:27:31 - mmengine - INFO - Epoch(train)  [6][25/31]  lr: 7.1872e-03  eta: 0:01:31  time: 0.4022  data_time: 0.0096  memory: 3707  loss: 0.2989  loss_rpn_cls: 0.0066  loss_rpn_bbox: 0.0152  loss_cls: 0.0788  acc: 96.7773  loss_bbox: 0.0983  loss_mask: 0.1000
2023/02/10 14:27:33 - mmengine - INFO - Epoch(train)  [6][30/31]  lr: 7.3874e-03  eta: 0:01:28  time: 0.3867  data_time: 0.0102  memory: 3716  loss: 0.3063  loss_rpn_cls: 0.0072  loss_rpn_bbox: 0.0167  loss_cls: 0.0814  acc: 93.8477  loss_bbox: 0.1014  loss_mask: 0.0995
2023/02/10 14:27:33 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:27:33 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/02/10 14:27:38 - mmengine - INFO - Epoch(val)  [6][5/7]    eta: 0:00:00  time: 0.6192  data_time: 0.1081  memory: 1832  
2023/02/10 14:27:39 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:27:39 - mmengine - INFO - bbox_mAP_copypaste: 0.742 0.915 0.898 0.252 0.695 0.786
2023/02/10 14:27:39 - mmengine - INFO - Evaluating segm...
2023/02/10 14:27:39 - mmengine - INFO - segm_mAP_copypaste: 0.783 0.893 0.893 0.101 0.728 0.830
2023/02/10 14:27:39 - mmengine - INFO - Epoch(val) [6][7/7]  coco/bbox_mAP: 0.7420  coco/bbox_mAP_50: 0.9150  coco/bbox_mAP_75: 0.8980  coco/bbox_mAP_s: 0.2520  coco/bbox_mAP_m: 0.6950  coco/bbox_mAP_l: 0.7860  coco/segm_mAP: 0.7830  coco/segm_mAP_50: 0.8930  coco/segm_mAP_75: 0.8930  coco/segm_mAP_s: 0.1010  coco/segm_mAP_m: 0.7280  coco/segm_mAP_l: 0.8300
2023/02/10 14:27:41 - mmengine - INFO - Epoch(train)  [7][ 5/31]  lr: 7.6276e-03  eta: 0:01:25  time: 0.3816  data_time: 0.0121  memory: 3560  loss: 0.2967  loss_rpn_cls: 0.0056  loss_rpn_bbox: 0.0166  loss_cls: 0.0766  acc: 99.3164  loss_bbox: 0.1005  loss_mask: 0.0974
2023/02/10 14:27:43 - mmengine - INFO - Epoch(train)  [7][10/31]  lr: 7.8278e-03  eta: 0:01:22  time: 0.3847  data_time: 0.0129  memory: 3714  loss: 0.3059  loss_rpn_cls: 0.0064  loss_rpn_bbox: 0.0186  loss_cls: 0.0767  acc: 94.9219  loss_bbox: 0.1074  loss_mask: 0.0969
2023/02/10 14:27:44 - mmengine - INFO - Epoch(train)  [7][15/31]  lr: 8.0280e-03  eta: 0:01:19  time: 0.3804  data_time: 0.0123  memory: 3861  loss: 0.2849  loss_rpn_cls: 0.0054  loss_rpn_bbox: 0.0173  loss_cls: 0.0672  acc: 96.8750  loss_bbox: 0.1033  loss_mask: 0.0917
2023/02/10 14:27:46 - mmengine - INFO - Epoch(train)  [7][20/31]  lr: 8.2282e-03  eta: 0:01:17  time: 0.3774  data_time: 0.0103  memory: 3840  loss: 0.2660  loss_rpn_cls: 0.0048  loss_rpn_bbox: 0.0162  loss_cls: 0.0629  acc: 96.4844  loss_bbox: 0.0959  loss_mask: 0.0862
2023/02/10 14:27:48 - mmengine - INFO - Epoch(train)  [7][25/31]  lr: 8.4284e-03  eta: 0:01:14  time: 0.3778  data_time: 0.0105  memory: 3624  loss: 0.2683  loss_rpn_cls: 0.0050  loss_rpn_bbox: 0.0164  loss_cls: 0.0629  acc: 99.5117  loss_bbox: 0.0981  loss_mask: 0.0859
2023/02/10 14:27:50 - mmengine - INFO - Epoch(train)  [7][30/31]  lr: 8.6286e-03  eta: 0:01:11  time: 0.3799  data_time: 0.0108  memory: 3786  loss: 0.2718  loss_rpn_cls: 0.0051  loss_rpn_bbox: 0.0170  loss_cls: 0.0637  acc: 99.1211  loss_bbox: 0.1005  loss_mask: 0.0855
2023/02/10 14:27:50 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:27:50 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/02/10 14:27:56 - mmengine - INFO - Epoch(val)  [7][5/7]    eta: 0:00:00  time: 0.5813  data_time: 0.0988  memory: 2024  
2023/02/10 14:27:57 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:27:57 - mmengine - INFO - bbox_mAP_copypaste: 0.697 0.866 0.802 0.101 0.660 0.743
2023/02/10 14:27:57 - mmengine - INFO - Evaluating segm...
2023/02/10 14:27:57 - mmengine - INFO - segm_mAP_copypaste: 0.743 0.851 0.822 0.252 0.613 0.804
2023/02/10 14:27:57 - mmengine - INFO - Epoch(val) [7][7/7]  coco/bbox_mAP: 0.6970  coco/bbox_mAP_50: 0.8660  coco/bbox_mAP_75: 0.8020  coco/bbox_mAP_s: 0.1010  coco/bbox_mAP_m: 0.6600  coco/bbox_mAP_l: 0.7430  coco/segm_mAP: 0.7430  coco/segm_mAP_50: 0.8510  coco/segm_mAP_75: 0.8220  coco/segm_mAP_s: 0.2520  coco/segm_mAP_m: 0.6130  coco/segm_mAP_l: 0.8040
2023/02/10 14:27:59 - mmengine - INFO - Epoch(train)  [8][ 5/31]  lr: 8.8689e-03  eta: 0:01:08  time: 0.3770  data_time: 0.0128  memory: 3841  loss: 0.2621  loss_rpn_cls: 0.0050  loss_rpn_bbox: 0.0164  loss_cls: 0.0606  acc: 96.8750  loss_bbox: 0.0979  loss_mask: 0.0823
2023/02/10 14:28:01 - mmengine - INFO - Epoch(train)  [8][10/31]  lr: 9.0691e-03  eta: 0:01:06  time: 0.3775  data_time: 0.0128  memory: 3698  loss: 0.2651  loss_rpn_cls: 0.0049  loss_rpn_bbox: 0.0162  loss_cls: 0.0618  acc: 94.6289  loss_bbox: 0.1011  loss_mask: 0.0811
2023/02/10 14:28:02 - mmengine - INFO - Epoch(train)  [8][15/31]  lr: 9.2693e-03  eta: 0:01:03  time: 0.3763  data_time: 0.0128  memory: 3712  loss: 0.2675  loss_rpn_cls: 0.0053  loss_rpn_bbox: 0.0159  loss_cls: 0.0619  acc: 98.5352  loss_bbox: 0.1026  loss_mask: 0.0819
2023/02/10 14:28:04 - mmengine - INFO - Epoch(train)  [8][20/31]  lr: 9.4695e-03  eta: 0:01:01  time: 0.3774  data_time: 0.0103  memory: 3759  loss: 0.2561  loss_rpn_cls: 0.0052  loss_rpn_bbox: 0.0143  loss_cls: 0.0590  acc: 98.7305  loss_bbox: 0.0975  loss_mask: 0.0800
2023/02/10 14:28:06 - mmengine - INFO - Epoch(train)  [8][25/31]  lr: 9.6697e-03  eta: 0:00:58  time: 0.3822  data_time: 0.0105  memory: 3821  loss: 0.2615  loss_rpn_cls: 0.0052  loss_rpn_bbox: 0.0149  loss_cls: 0.0621  acc: 99.0234  loss_bbox: 0.0989  loss_mask: 0.0805
2023/02/10 14:28:08 - mmengine - INFO - Epoch(train)  [8][30/31]  lr: 9.8699e-03  eta: 0:00:56  time: 0.3819  data_time: 0.0099  memory: 3782  loss: 0.2500  loss_rpn_cls: 0.0042  loss_rpn_bbox: 0.0141  loss_cls: 0.0601  acc: 99.1211  loss_bbox: 0.0930  loss_mask: 0.0786
2023/02/10 14:28:09 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:28:09 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/02/10 14:28:15 - mmengine - INFO - Epoch(val)  [8][5/7]    eta: 0:00:00  time: 0.3986  data_time: 0.0439  memory: 1870  
2023/02/10 14:28:15 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:28:15 - mmengine - INFO - bbox_mAP_copypaste: 0.692 0.870 0.835 0.000 0.614 0.750
2023/02/10 14:28:15 - mmengine - INFO - Evaluating segm...
2023/02/10 14:28:15 - mmengine - INFO - segm_mAP_copypaste: 0.757 0.851 0.851 0.000 0.622 0.833
2023/02/10 14:28:15 - mmengine - INFO - Epoch(val) [8][7/7]  coco/bbox_mAP: 0.6920  coco/bbox_mAP_50: 0.8700  coco/bbox_mAP_75: 0.8350  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.6140  coco/bbox_mAP_l: 0.7500  coco/segm_mAP: 0.7570  coco/segm_mAP_50: 0.8510  coco/segm_mAP_75: 0.8510  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.6220  coco/segm_mAP_l: 0.8330
2023/02/10 14:28:17 - mmengine - INFO - Epoch(train)  [9][ 5/31]  lr: 1.0110e-03  eta: 0:00:53  time: 0.3893  data_time: 0.0110  memory: 3707  loss: 0.2520  loss_rpn_cls: 0.0041  loss_rpn_bbox: 0.0145  loss_cls: 0.0607  acc: 99.9023  loss_bbox: 0.0940  loss_mask: 0.0788
2023/02/10 14:28:20 - mmengine - INFO - Epoch(train)  [9][10/31]  lr: 1.0310e-03  eta: 0:00:51  time: 0.3971  data_time: 0.0111  memory: 3816  loss: 0.2486  loss_rpn_cls: 0.0038  loss_rpn_bbox: 0.0144  loss_cls: 0.0594  acc: 97.8516  loss_bbox: 0.0933  loss_mask: 0.0776
2023/02/10 14:28:22 - mmengine - INFO - Epoch(train)  [9][15/31]  lr: 1.0511e-03  eta: 0:00:48  time: 0.3961  data_time: 0.0107  memory: 3840  loss: 0.2364  loss_rpn_cls: 0.0034  loss_rpn_bbox: 0.0140  loss_cls: 0.0563  acc: 99.5117  loss_bbox: 0.0872  loss_mask: 0.0755
2023/02/10 14:28:25 - mmengine - INFO - Epoch(train)  [9][20/31]  lr: 1.0711e-03  eta: 0:00:47  time: 0.4306  data_time: 0.0082  memory: 3519  loss: 0.2291  loss_rpn_cls: 0.0033  loss_rpn_bbox: 0.0134  loss_cls: 0.0547  acc: 99.9023  loss_bbox: 0.0841  loss_mask: 0.0736
2023/02/10 14:28:29 - mmengine - INFO - Epoch(train)  [9][25/31]  lr: 1.0911e-03  eta: 0:00:45  time: 0.4794  data_time: 0.0090  memory: 3870  loss: 0.2424  loss_rpn_cls: 0.0033  loss_rpn_bbox: 0.0143  loss_cls: 0.0577  acc: 97.5586  loss_bbox: 0.0905  loss_mask: 0.0766
2023/02/10 14:28:32 - mmengine - INFO - Epoch(train)  [9][30/31]  lr: 1.1111e-03  eta: 0:00:43  time: 0.4816  data_time: 0.0089  memory: 3886  loss: 0.2333  loss_rpn_cls: 0.0025  loss_rpn_bbox: 0.0134  loss_cls: 0.0547  acc: 97.5586  loss_bbox: 0.0858  loss_mask: 0.0770
2023/02/10 14:28:32 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:28:32 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/02/10 14:28:38 - mmengine - INFO - Epoch(val)  [9][5/7]    eta: 0:00:00  time: 0.3616  data_time: 0.0440  memory: 1870  
2023/02/10 14:28:38 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:28:38 - mmengine - INFO - bbox_mAP_copypaste: 0.739 0.876 0.859 0.000 0.639 0.812
2023/02/10 14:28:38 - mmengine - INFO - Evaluating segm...
2023/02/10 14:28:38 - mmengine - INFO - segm_mAP_copypaste: 0.768 0.857 0.857 0.000 0.695 0.834
2023/02/10 14:28:38 - mmengine - INFO - Epoch(val) [9][7/7]  coco/bbox_mAP: 0.7390  coco/bbox_mAP_50: 0.8760  coco/bbox_mAP_75: 0.8590  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.6390  coco/bbox_mAP_l: 0.8120  coco/segm_mAP: 0.7680  coco/segm_mAP_50: 0.8570  coco/segm_mAP_75: 0.8570  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.6950  coco/segm_mAP_l: 0.8340
2023/02/10 14:28:41 - mmengine - INFO - Epoch(train) [10][ 5/31]  lr: 1.1351e-03  eta: 0:00:40  time: 0.4912  data_time: 0.0112  memory: 3605  loss: 0.2215  loss_rpn_cls: 0.0023  loss_rpn_bbox: 0.0133  loss_cls: 0.0513  acc: 97.1680  loss_bbox: 0.0814  loss_mask: 0.0732
2023/02/10 14:28:43 - mmengine - INFO - Epoch(train) [10][10/31]  lr: 1.1552e-03  eta: 0:00:38  time: 0.4978  data_time: 0.0113  memory: 3797  loss: 0.2123  loss_rpn_cls: 0.0020  loss_rpn_bbox: 0.0128  loss_cls: 0.0477  acc: 99.1211  loss_bbox: 0.0785  loss_mask: 0.0712
2023/02/10 14:28:45 - mmengine - INFO - Epoch(train) [10][15/31]  lr: 1.1752e-03  eta: 0:00:35  time: 0.5044  data_time: 0.0117  memory: 3695  loss: 0.2174  loss_rpn_cls: 0.0021  loss_rpn_bbox: 0.0126  loss_cls: 0.0484  acc: 96.5820  loss_bbox: 0.0798  loss_mask: 0.0745
2023/02/10 14:28:48 - mmengine - INFO - Epoch(train) [10][20/31]  lr: 1.1952e-03  eta: 0:00:33  time: 0.5147  data_time: 0.0104  memory: 3702  loss: 0.2052  loss_rpn_cls: 0.0020  loss_rpn_bbox: 0.0113  loss_cls: 0.0439  acc: 96.0938  loss_bbox: 0.0751  loss_mask: 0.0728
2023/02/10 14:28:51 - mmengine - INFO - Epoch(train) [10][25/31]  lr: 1.2152e-03  eta: 0:00:31  time: 0.5388  data_time: 0.0105  memory: 3690  loss: 0.2018  loss_rpn_cls: 0.0019  loss_rpn_bbox: 0.0106  loss_cls: 0.0432  acc: 98.5352  loss_bbox: 0.0732  loss_mask: 0.0729
2023/02/10 14:28:53 - mmengine - INFO - Epoch(train) [10][30/31]  lr: 1.2352e-03  eta: 0:00:29  time: 0.5317  data_time: 0.0105  memory: 3841  loss: 0.1959  loss_rpn_cls: 0.0019  loss_rpn_bbox: 0.0104  loss_cls: 0.0416  acc: 99.2188  loss_bbox: 0.0703  loss_mask: 0.0715
2023/02/10 14:28:53 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:28:53 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/02/10 14:28:59 - mmengine - INFO - Epoch(val) [10][5/7]    eta: 0:00:00  time: 0.3552  data_time: 0.0439  memory: 2497  
2023/02/10 14:28:59 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:28:59 - mmengine - INFO - bbox_mAP_copypaste: 0.766 0.877 0.845 0.000 0.705 0.828
2023/02/10 14:28:59 - mmengine - INFO - Evaluating segm...
2023/02/10 14:28:59 - mmengine - INFO - segm_mAP_copypaste: 0.782 0.858 0.858 0.000 0.683 0.850
2023/02/10 14:28:59 - mmengine - INFO - Epoch(val) [10][7/7]  coco/bbox_mAP: 0.7660  coco/bbox_mAP_50: 0.8770  coco/bbox_mAP_75: 0.8450  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.7050  coco/bbox_mAP_l: 0.8280  coco/segm_mAP: 0.7820  coco/segm_mAP_50: 0.8580  coco/segm_mAP_75: 0.8580  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.6830  coco/segm_mAP_l: 0.8500
2023/02/10 14:29:01 - mmengine - INFO - Epoch(train) [11][ 5/31]  lr: 1.2593e-03  eta: 0:00:26  time: 0.5296  data_time: 0.0123  memory: 3712  loss: 0.2046  loss_rpn_cls: 0.0021  loss_rpn_bbox: 0.0106  loss_cls: 0.0434  acc: 99.6094  loss_bbox: 0.0728  loss_mask: 0.0757
2023/02/10 14:29:03 - mmengine - INFO - Epoch(train) [11][10/31]  lr: 1.2793e-03  eta: 0:00:23  time: 0.4940  data_time: 0.0125  memory: 3833  loss: 0.2059  loss_rpn_cls: 0.0020  loss_rpn_bbox: 0.0104  loss_cls: 0.0439  acc: 98.1445  loss_bbox: 0.0732  loss_mask: 0.0764
2023/02/10 14:29:05 - mmengine - INFO - Epoch(train) [11][15/31]  lr: 1.2993e-03  eta: 0:00:21  time: 0.4532  data_time: 0.0120  memory: 3841  loss: 0.1919  loss_rpn_cls: 0.0019  loss_rpn_bbox: 0.0096  loss_cls: 0.0408  acc: 99.6094  loss_bbox: 0.0659  loss_mask: 0.0736
2023/02/10 14:29:07 - mmengine - INFO - Epoch(train) [11][20/31]  lr: 1.3193e-03  eta: 0:00:19  time: 0.4386  data_time: 0.0098  memory: 3751  loss: 0.1872  loss_rpn_cls: 0.0018  loss_rpn_bbox: 0.0090  loss_cls: 0.0403  acc: 98.3398  loss_bbox: 0.0644  loss_mask: 0.0716
2023/02/10 14:29:09 - mmengine - INFO - Epoch(train) [11][25/31]  lr: 1.3393e-03  eta: 0:00:16  time: 0.4338  data_time: 0.0093  memory: 3519  loss: 0.1831  loss_rpn_cls: 0.0017  loss_rpn_bbox: 0.0081  loss_cls: 0.0382  acc: 98.3398  loss_bbox: 0.0628  loss_mask: 0.0723
2023/02/10 14:29:10 - mmengine - INFO - Epoch(train) [11][30/31]  lr: 1.3594e-03  eta: 0:00:14  time: 0.4311  data_time: 0.0093  memory: 3726  loss: 0.1827  loss_rpn_cls: 0.0017  loss_rpn_bbox: 0.0081  loss_cls: 0.0380  acc: 99.3164  loss_bbox: 0.0624  loss_mask: 0.0725
2023/02/10 14:29:11 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:29:11 - mmengine - INFO - Saving checkpoint at 11 epochs
2023/02/10 14:29:16 - mmengine - INFO - Epoch(val) [11][5/7]    eta: 0:00:00  time: 0.3510  data_time: 0.0440  memory: 1870  
2023/02/10 14:29:16 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:29:16 - mmengine - INFO - bbox_mAP_copypaste: 0.742 0.865 0.847 0.000 0.686 0.793
2023/02/10 14:29:16 - mmengine - INFO - Evaluating segm...
2023/02/10 14:29:16 - mmengine - INFO - segm_mAP_copypaste: 0.782 0.846 0.846 0.000 0.703 0.841
2023/02/10 14:29:16 - mmengine - INFO - Epoch(val) [11][7/7]  coco/bbox_mAP: 0.7420  coco/bbox_mAP_50: 0.8650  coco/bbox_mAP_75: 0.8470  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.6860  coco/bbox_mAP_l: 0.7930  coco/segm_mAP: 0.7820  coco/segm_mAP_50: 0.8460  coco/segm_mAP_75: 0.8460  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.7030  coco/segm_mAP_l: 0.8410
2023/02/10 14:29:18 - mmengine - INFO - Epoch(train) [12][ 5/31]  lr: 1.3834e-04  eta: 0:00:11  time: 0.4130  data_time: 0.0112  memory: 3719  loss: 0.1736  loss_rpn_cls: 0.0017  loss_rpn_bbox: 0.0078  loss_cls: 0.0370  acc: 99.2188  loss_bbox: 0.0588  loss_mask: 0.0684
2023/02/10 14:29:20 - mmengine - INFO - Epoch(train) [12][10/31]  lr: 1.4034e-04  eta: 0:00:09  time: 0.3893  data_time: 0.0111  memory: 3841  loss: 0.1640  loss_rpn_cls: 0.0017  loss_rpn_bbox: 0.0074  loss_cls: 0.0348  acc: 99.4141  loss_bbox: 0.0551  loss_mask: 0.0649
2023/02/10 14:29:23 - mmengine - INFO - Epoch(train) [12][15/31]  lr: 1.4234e-04  eta: 0:00:07  time: 0.3927  data_time: 0.0111  memory: 3737  loss: 0.1680  loss_rpn_cls: 0.0017  loss_rpn_bbox: 0.0075  loss_cls: 0.0359  acc: 98.3398  loss_bbox: 0.0567  loss_mask: 0.0662
2023/02/10 14:29:25 - mmengine - INFO - Epoch(train) [12][20/31]  lr: 1.4434e-04  eta: 0:00:04  time: 0.3909  data_time: 0.0097  memory: 3707  loss: 0.1650  loss_rpn_cls: 0.0015  loss_rpn_bbox: 0.0070  loss_cls: 0.0349  acc: 98.4375  loss_bbox: 0.0552  loss_mask: 0.0664
2023/02/10 14:29:27 - mmengine - INFO - Epoch(train) [12][25/31]  lr: 1.4635e-04  eta: 0:00:02  time: 0.3946  data_time: 0.0102  memory: 3886  loss: 0.1653  loss_rpn_cls: 0.0016  loss_rpn_bbox: 0.0073  loss_cls: 0.0348  acc: 99.3164  loss_bbox: 0.0561  loss_mask: 0.0656
2023/02/10 14:29:30 - mmengine - INFO - Epoch(train) [12][30/31]  lr: 1.4835e-04  eta: 0:00:00  time: 0.4235  data_time: 0.0099  memory: 3749  loss: 0.1620  loss_rpn_cls: 0.0015  loss_rpn_bbox: 0.0070  loss_cls: 0.0348  acc: 96.7773  loss_bbox: 0.0551  loss_mask: 0.0637
2023/02/10 14:29:30 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20230210_142518
2023/02/10 14:29:30 - mmengine - INFO - Saving checkpoint at 12 epochs
2023/02/10 14:29:36 - mmengine - INFO - Epoch(val) [12][5/7]    eta: 0:00:00  time: 0.3174  data_time: 0.0439  memory: 1851  
2023/02/10 14:29:37 - mmengine - INFO - Evaluating bbox...
2023/02/10 14:29:37 - mmengine - INFO - bbox_mAP_copypaste: 0.748 0.865 0.847 0.000 0.683 0.801
2023/02/10 14:29:37 - mmengine - INFO - Evaluating segm...
2023/02/10 14:29:37 - mmengine - INFO - segm_mAP_copypaste: 0.780 0.846 0.846 0.000 0.703 0.838
2023/02/10 14:29:37 - mmengine - INFO - Epoch(val) [12][7/7]  coco/bbox_mAP: 0.7480  coco/bbox_mAP_50: 0.8650  coco/bbox_mAP_75: 0.8470  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.6830  coco/bbox_mAP_l: 0.8010  coco/segm_mAP: 0.7800  coco/segm_mAP_50: 0.8460  coco/segm_mAP_75: 0.8460  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.7030  coco/segm_mAP_l: 0.8380
